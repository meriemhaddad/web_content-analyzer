"""
Pydantic models for API responses.
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union
from datetime import datetime

# Dynamic categorization - no need for predefined categories
# The AI will generate appropriate categories based on content

class SentimentScore(BaseModel):
    """Sentiment analysis results."""
    overall: str = Field(..., description="Overall sentiment: positive, negative, or neutral")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence score")
    emotions: Dict[str, float] = Field(default_factory=dict, description="Emotion scores")

class ContentMetadata(BaseModel):
    """Page metadata information."""
    title: Optional[str] = None
    description: Optional[str] = None
    keywords: List[str] = Field(default_factory=list)
    author: Optional[str] = None
    publish_date: Optional[datetime] = None
    language: Optional[str] = None
    word_count: Optional[int] = None
    reading_time_minutes: Optional[int] = None

class SemanticAnalysis(BaseModel):
    """Semantic analysis results."""
    main_topics: List[str] = Field(default_factory=list, description="Primary topics identified")
    entities: List[Dict[str, Any]] = Field(default_factory=list, description="Named entities found")
    themes: List[str] = Field(default_factory=list, description="Major themes")
    content_structure: Dict[str, Any] = Field(default_factory=dict, description="Content structure analysis")
    semantic_keywords: List[str] = Field(default_factory=list, description="Semantically relevant keywords")
    
class ContentAnalysisResult(BaseModel):
    """Complete content analysis result for a single URL."""
    
    url: str = Field(..., description="Analyzed URL")
    status: str = Field(..., description="Analysis status")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Analysis timestamp")
    
    # Core categorization - dynamic categories generated by AI
    primary_category: str = Field(..., description="Primary content category (AI-generated)")
    secondary_categories: List[str] = Field(default_factory=list, description="Secondary categories (AI-generated)")
    category_confidence: float = Field(..., ge=0.0, le=1.0, description="Categorization confidence")
    
    # Content analysis
    content_summary: str = Field(..., description="AI-generated content summary")
    key_insights: List[str] = Field(default_factory=list, description="Key insights from content")
    
    # Semantic analysis
    semantic_analysis: SemanticAnalysis = Field(..., description="Detailed semantic analysis")
    
    # Sentiment analysis
    sentiment: SentimentScore = Field(..., description="Sentiment analysis results")
    
    # Metadata
    metadata: ContentMetadata = Field(..., description="Page metadata")
    
    # Quality metrics
    content_quality_score: float = Field(..., ge=0.0, le=1.0, description="Content quality assessment")
    readability_score: Optional[float] = Field(None, ge=0.0, le=1.0, description="Content readability score")
    
    # Processing info
    processing_time_seconds: float = Field(..., description="Processing time in seconds")
    model_version: str = Field(default="gpt-4o", description="AI model used for analysis")

class BatchAnalysisResult(BaseModel):
    """Batch analysis result."""
    
    total_urls: int = Field(..., description="Total number of URLs processed")
    successful_analyses: int = Field(..., description="Number of successful analyses")
    failed_analyses: int = Field(..., description="Number of failed analyses")
    
    results: List[ContentAnalysisResult] = Field(default_factory=list, description="Individual analysis results")
    errors: List[Dict[str, str]] = Field(default_factory=list, description="Error details for failed analyses")
    
    # Aggregate statistics
    category_distribution: Dict[str, int] = Field(default_factory=dict, description="Distribution of categories")
    average_quality_score: Optional[float] = Field(None, description="Average content quality score")
    processing_time_seconds: float = Field(..., description="Total processing time")
    
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Batch processing timestamp")

class HealthResponse(BaseModel):
    """Health check response."""
    status: str = Field(..., description="Service status")
    service: str = Field(..., description="Service name")
    version: str = Field(..., description="Service version")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Response timestamp")

class ErrorResponse(BaseModel):
    """Error response model."""
    error: str = Field(..., description="Error type")
    message: str = Field(..., description="Error message")
    details: Optional[Dict[str, Any]] = Field(None, description="Additional error details")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Error timestamp")